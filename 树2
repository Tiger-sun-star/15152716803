#include <stdio.h>
#include <stdlib.h>

typedef struct node {
	int data;
	struct node* left;
	struct node* right;
} Node;

typedef struct{
	Node* root;
}Tree;

void insert(Tree* tree, int value) {
	Node* node = malloc(sizeof(Node));
	node -> data = value;
	node -> left = NULL;
	node -> right = NULL;

	if (tree -> root == NULL) {
		tree -> root = node;
	}
	else {
		Node* temp = tree->root;
		while (temp != NULL) {
			if (temp < temp -> data) {
				if (temp -> left == NULL) {
					temp -> left = node;
					return;
				}
				else {
					temp = temp -> left;
				}
			}
			else {
				if (temp -> right == NULL) {
					temp -> right = node;
					return ;
				}
				else {
					temp = temp -> right;

				}
			}
		}
	}
}



void preorder(Node* node) {
	if (node != NULL) {
		printf("%d", node->data);
		preorder(node->left);
		preorder(node->right);
	}
}

void inorder(Node* node) {
	if (node != NULL) {
		inorder(node->left);
		printf("%d\n", node->data);
		inorder(node->right);
	}
}

void postorder(Node* node) {
	if (node != NULL) {
		postorder(node->left);
		postorder(node->right);
	}
}


int main() {
	int arr[7] = { 6, 3, 8, 2, 5, 1, 7};
	Tree tree;
	tree.root = NULL;

	int i;
	for (i = 0; i < 7; i++) {
		insert
		(&tree, arr[i]);
	}

	inorder(tree.root);
}
